#ifndef TEST_SHA512_H
#define TEST_SHA512_H

#include "../SHA512_Hash/SHA512.h"
#include "gtest/gtest.h"
#include <string>
#include <chrono>

using namespace AlgorithmSHA512;

//Test Samples is from:
//https://www.di-mgt.com.au/sha_testvectors.html

/*Unit Test SHA512 Hash Algorithm*/
class SHA512Test : public ::testing::Test {
public:
	SHA512* rInstance{ nullptr };
	using myclock = chrono::steady_clock;
	myclock::time_point start;
	myclock::time_point end;

protected:
	void SetUp() override {
		rInstance = new SHA512;
	}

	void TearDown() override { delete rInstance; }
};

TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST2_0bit) {
	/*Input message "" (empty string) (0 bits)*/
	string StringTest = "";
	vector<uint8_t> CorrectDigest = { 0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07, 0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce, 0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f, 0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e };
	auto SendMessage = new vector<uint8_t>(StringTest.begin(), StringTest.end());
	auto Digest = rInstance->GetHash(SendMessage);

	ASSERT_EQ(CorrectDigest.size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ(CorrectDigest[i], (*Digest)[i]); };

	CorrectDigest.clear();
	delete Digest;
	delete SendMessage;
	StringTest.clear();
}


TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST1_24Bit) {
	/*Input message "abc" (24 bits)*/
	string StringTest = "abc";
	vector<uint8_t> CorrectDigest = { 0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73, 0x49, 0xae, 0x20, 0x41, 0x31, 0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2, 0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a, 0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8, 0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd, 0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e, 0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f };
	auto SendMessage = new vector<uint8_t>(StringTest.begin(), StringTest.end());
	auto Digest = rInstance->GetHash(SendMessage);

	ASSERT_EQ(CorrectDigest.size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ(CorrectDigest[i], (*Digest)[i]); };

	CorrectDigest.clear();
	delete Digest;
	delete SendMessage;
	StringTest.clear();
}


TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST3_448Bit) {
	/*Input message "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" (448 bits)*/
	string StringTest = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
	vector<uint8_t> CorrectDigest = { 0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a, 0x0c, 0xed, 0x7b, 0xeb, 0x8e, 0x08, 0xa4, 0x16, 0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2, 0x28, 0xa8, 0x27, 0x9b, 0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35, 0x96, 0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07, 0xf9, 0xaa, 0x1d, 0x3b, 0xea, 0x57, 0x78, 0x9c, 0xa0, 0x31, 0xad, 0x85, 0xc7, 0xa7, 0x1d, 0xd7, 0x03, 0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45 };
	auto SendMessage = new vector<uint8_t>(StringTest.begin(), StringTest.end());
	auto Digest = rInstance->GetHash(SendMessage);

	ASSERT_EQ(CorrectDigest.size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ(CorrectDigest[i], (*Digest)[i]); };

	CorrectDigest.clear();
	delete Digest;
	delete SendMessage;
	StringTest.clear();
}

TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST4_896Bit) {
	/*Input message "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" (896 bits)*/
	string StringTest = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
	vector<uint8_t> CorrectDigest = { 0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda, 0x8c, 0xf4, 0xf7, 0x28, 0x14, 0xfc, 0x14, 0x3f, 0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f, 0x7f, 0xa1, 0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18, 0x50, 0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4, 0x33, 0x1b, 0x99, 0xde, 0xc4, 0xb5, 0x43, 0x3a, 0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26, 0x54, 0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09 };
	auto SendMessage = new vector<uint8_t>(StringTest.begin(), StringTest.end());
	auto Digest = rInstance->GetHash(SendMessage);

	ASSERT_EQ(CorrectDigest.size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ(CorrectDigest[i], (*Digest)[i]); };

	CorrectDigest.clear();
	delete Digest;
	delete SendMessage;
	StringTest.clear();
}

TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST5_1Mb) {
	/*Input message one million (1,000,000) repetitions of the character 'a' (8 million bits)*/
	string StringTest(1000000, 'a');
	vector<uint8_t> CorrectDigest = { 0xe7, 0x18, 0x48, 0x3d, 0x0c, 0xe7, 0x69, 0x64, 0x4e, 0x2e, 0x42, 0xc7, 0xbc, 0x15, 0xb4, 0x63, 0x8e, 0x1f, 0x98, 0xb1, 0x3b, 0x20, 0x44, 0x28, 0x56, 0x32, 0xa8, 0x03, 0xaf, 0xa9, 0x73, 0xeb, 0xde, 0x0f, 0xf2, 0x44, 0x87, 0x7e, 0xa6, 0x0a, 0x4c, 0xb0, 0x43, 0x2c, 0xe5, 0x77, 0xc3, 0x1b, 0xeb, 0x00, 0x9c, 0x5c, 0x2c, 0x49, 0xaa, 0x2e, 0x4e, 0xad, 0xb2, 0x17, 0xad, 0x8c, 0xc0, 0x9b };
	auto SendMessage = new vector<uint8_t>(StringTest.begin(), StringTest.end());
	auto Digest = rInstance->GetHash(SendMessage);

	ASSERT_EQ(CorrectDigest.size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ(CorrectDigest[i], (*Digest)[i]); };

	CorrectDigest.clear();
	delete Digest;
	delete SendMessage;
	StringTest.clear();
}

TEST_F(SHA512Test, CorrectWorkFunctionGetHash_TEST6_1Gb) {
	/*Input message: the extremely-long message "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno" repeated 16,777,216 times: a bit string of length 233 bits (1 GB).*/
	string StringTest = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";
	vector<uint8_t>* CorrectDigest = new vector<uint8_t>{ 0xb4, 0x7c, 0x93, 0x34, 0x21, 0xea, 0x2d, 0xb1, 0x49, 0xad, 0x6e, 0x10, 0xfc, 0xe6, 0xc7, 0xf9, 0x3d, 0x07, 0x52, 0x38, 0x01, 0x80, 0xff, 0xd7, 0xf4, 0x62, 0x9a, 0x71, 0x21, 0x34, 0x83, 0x1d, 0x77, 0xbe, 0x60, 0x91, 0xb8, 0x19, 0xed, 0x35, 0x2c, 0x29, 0x67, 0xa2, 0xe2, 0xd4, 0xfa, 0x50, 0x50, 0x72, 0x3c, 0x96, 0x30, 0x69, 0x1f, 0x1a, 0x05, 0xa7, 0x28, 0x1d, 0xbe, 0x6c, 0x10, 0x86 };
	auto SendMessage = new vector<uint8_t>;
	for (uint64_t i = 0; i < 16777216; i++) { SendMessage->insert(SendMessage->end(), StringTest.begin(), StringTest.end()); };
	
	start = myclock::now();
	auto Digest = rInstance->GetHash(SendMessage);
	end = myclock::now();
	cout << "SHA512_1Gbyte_calculate time: " << chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

	ASSERT_EQ(CorrectDigest->size(), 64);
	ASSERT_EQ(Digest->size(), 64);

	for (uint8_t i = 0; i < 64; i++) { EXPECT_EQ((*CorrectDigest)[i], (*Digest)[i]); };

	delete CorrectDigest;
	delete Digest;
	delete SendMessage;
}

#endif // TEST_SHA512_H

