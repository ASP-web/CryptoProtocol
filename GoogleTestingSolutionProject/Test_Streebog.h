#pragma once

#include "../Streebog/Streebog.h"
#include "gtest/gtest.h"
#include <fstream>
#include <chrono>

using namespace std;

class TestStreebog : public ::testing::Test {
public:
	using myclock = chrono::steady_clock;
	myclock::time_point start;
	myclock::time_point end;
};

TEST_F(TestStreebog, CorrectWorkStreebog) {
	STREEBOG streebogHASH;
	vector<uint8_t>* Message = new vector<uint8_t>{ 0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20, 0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb, 0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed, 0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2, 0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1, 0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c, 0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6, 0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c, 0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1 };
	start = myclock::now();
	streebogHASH.GetHash(Message);
	end = myclock::now();
	cout << "Hash calculation time: " << chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

	delete Message;
}
